@using Fuyu.Backend.Core.DTO.Accounts

@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@page "/register"

<Background Glass="true" GlassLeftPos="50%" />

<MudGrid Style="height: calc(100vh - 64px);" Spacing="0">
    <MudItem xs="6">
    </MudItem>
    <MudItem xs="6">
        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Style="height: 100%">
            <MudStack Style="width: 400px;">
                <MudPaper Class="pa-4" Elevation="4">
                    <MudText Typo="Typo.body1">Register</MudText>
                    <MudText Typo="Typo.body2">Choose your account credentials.</MudText>
                </MudPaper>

                <MudPaper Class="pa-4" Elevation="4">
                    <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                        <MudTextField @bind-Value="_username" Label="Username" Required="true" RequiredError="Required" />
                        <MudTextField @bind-Value="_password" Label="Password" Required="true" RequiredError="Required"
                                        InputType="InputType.Password"
                                        HelperText="Choose a strong password" />
                        <MudTextField T="string" Label="Repeat the Password" Required="true" InputType="InputType.Password" Validation="@(new Func<string, string>(PasswordMatch))" />
                        <div class="d-flex align-center justify-center mt-6">
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Disabled="@(!_success)" OnClick="Register_Clicked">Register</MudButton>
                        </div>
                    </MudForm>
                </MudPaper>
            </MudStack>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    private bool _success;
    private string[] _errors = [];
    private MudForm _form;

    private string _username = string.Empty;
    private string _password = string.Empty;

    private string PasswordMatch(string arg)
    {
        return _password != arg ? "Passwords don't match" : null;
    }

    public void Register_Clicked()
    {
        _form.Validate();
        if (!_form.IsValid)
        {
            return;
        }

        var status = RequestService.RegisterAccount(_username, _password);

        switch (status)
        {
            case ERegisterStatus.Success:
                Snackbar.Add("Account registered successfully. You can now login.", Severity.Success);
                Navigation.NavigateTo("/login");
                break;

            case ERegisterStatus.AlreadyExists:
                Snackbar.Add("Account already exists.", Severity.Warning);
                break;

            case ERegisterStatus.PasswordInvalid:
                Snackbar.Add("Password doesn't meet the requirements.", Severity.Warning);
                break;

            case ERegisterStatus.PasswordTooLong:
                Snackbar.Add("Password too long.", Severity.Warning);
                break;
            case ERegisterStatus.PasswordTooShort:
                Snackbar.Add("Password too short.", Severity.Warning);
                break;

            case ERegisterStatus.PasswordEmpty:
                Snackbar.Add("Didn't receive a password.", Severity.Warning);
                break;

            case ERegisterStatus.UsernameInvalid:
                Snackbar.Add("Username contains invalid characters.", Severity.Warning);
                break;

            case ERegisterStatus.UsernameTooLong:
                Snackbar.Add("Username too long.", Severity.Warning);
                break;

            case ERegisterStatus.UsernameTooShort:
                Snackbar.Add("Username too short.", Severity.Warning);
                break;

            case ERegisterStatus.UsernameEmpty:
                Snackbar.Add("Didn't receive a username.", Severity.Warning);
                break;

        }
    }
}
