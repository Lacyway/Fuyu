@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<SessionState> SessionState
@inject IState<GamesState> GamesState
@inject IState<ActiveGameState> ActiveGameState

<Background Glass="true" BackgroundImage=@($"bg-{ActiveGameState.Value.GameId}.png") />

<div>
    <MudStack Style="width: 400px;">
        <MudPaper Class="pa-4" Elevation="4">
            <MudText Typo="Typo.body1">@games[ActiveGameState.Value.GameId]</MudText>
        </MudPaper>

        <MudPaper Class="pa-4" Elevation="4">
            <MudText>Placeholder</MudText>
        </MudPaper>
    </MudStack>
    <div class="fixed mr-6 mb-6" style="bottom: 0; right: 0;">
        <MudTooltip Text="Start Game" ShowOnHover="true" Arrow="true" Placement="Placement.Left">
            <MudFab @onclick="StartGame_Clicked" Color="@Color.Tertiary" StartIcon="@Icons.Material.Filled.PlayArrow" />
        </MudTooltip>
    </div>
</div>

@code {
    // TODO: This Dictionary should be changed for a localization service in the future
    private readonly Dictionary<string, string> games = new()
    {
        { "eft",   "Escape from Tarkov"        },
        { "arena", "Escape from Tarkov: Arena" }
    };

    private void StartGame_Clicked()
    {
        if (!GamesState.Value.Games.ContainsKey(ActiveGameState.Value.GameId))
        {
            return;
        }

        var accountId = (int)GamesState.Value.Games[ActiveGameState.Value.GameId];

        var gameSessionId = RequestService.LoginGame(ActiveGameState.Value.GameId, accountId);

        switch (ActiveGameState.Value.GameId)
        {
            case "eft":
                using (var process = ProcessService.StartEft(SettingsService.EftDirectory, gameSessionId, SettingsService.EftAddress))
                {
                    process.Start();
                }
                break;

            case "arena":
                using (var process = ProcessService.StartArena(SettingsService.ArenaDirectory, gameSessionId, SettingsService.ArenaAddress))
                {
                    process.Start();
                }
                break;

        }
    }
}
